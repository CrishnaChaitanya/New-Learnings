package com. Fundconnect.monitoring.config;

import com.ibm.mq.jakarta.jms.MQConnectionFactory;

import com.ibm.mq.jakarta.jms.MQQueueConnectionFactory;

import com.ibm.msg.client.jakarta.wmq.WMQConstants;

import jakarta.jms.ConnectionFactory;

import lombok.extern.slf4j.slf4j;

import org.springframework.beans.factory.annotation.Value;

import org.springframework.context.annotation.Bean;

import org.springframework.context.annotation.configuration;

import org.springframework.jms.config.DefaultJmsListenerContainerFactory;

import org.springframework.jms.core.ImsTemplate;

import org.springframework.jms.support.converter.MappingJackson2MessageConverter;

import org.springframework.jms.support.converter.MessageConverter;

import org.springframework.jms.support.converter.MessageType;

@Configuration

@slf4j

public class JMSConfig {

@Value("${ibm.mq.host}")

private String hostName;

@Value("${ibm.mq.port}")

private Integer port;

@Value("${ibm.mq.queueManager}")

private String queueManager;

@Value("${ibm.mq.channel}")

private String channel;

@Value("${ibm.mq.connName}")

private String connName;

@Value("${ibm.mq.user}")

private String user;

@Bean

public MQQueueConnectionFactory connectionFactory() {

log, info("Connecting to IBM MQ");

MQQueueConnectionFactory factory new MQQueueConnectionFactory();


_----------_

@Bean

public MQQueueConnectionFactory connectionFactory() {

log.info("Connecting to IBM MQ");

MQQueueConnectionFactory factory = new MQQueueConnectionFactory();

try

factory.setHostName (hostName);

factory.setPort(port);

factory.setQueueManager (queueManager);

factory.setChannel(channel);

factory.setstringProperty(WMQConstants.USERID, user);

factory.setConnectionNameList(connName);

factory.setTransportType(WMQConstants.WMQ_CM_CLIENT);

log.info("Connected to IBM MQ");

catch (Exception e) {

log.error(" Error while Connecting to IBM MQ",e);

}

return factory;

}

/*@Bean

public Default]msListenerContainerFactory myFactory (ConnectionFactory connectionFactory) {

DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory();

factory.setConnectionFactory (connectionFactory);

factory.setConcurrency("1-1"); // Set to true for topic

factory.setErrorHandler(t -> System.err.println("An error has occurred in the transaction" + t.getMessage()));

return factory;

}*/

/* @Bean

public MessageConverter jacksonJmsMessageConverter() {

MappingJackson2MessageConverter converter = new MappingJackson2MessageConverter();

converter.setTargetType(MessageType.TEXT);

converter.setTypeIdPropertyName("_type");

return converter;

___________

@Bean

public ImsTemplate jmsTemplate (MQQueueConnectionFactory connectionFactory) {

return new JmsTemplate (connectionFactory);

}

}
_______

import com.Fundconnect monitoring.model.ConnectionEvent;

import com.fundconnect.monitoring.model.ConnectionEventMap;

import lombok.extern.slf4j.slf4j;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.beans.factory.annotation.Value;

import org.springframework.boot.autoconfigure.condition.ConditionalonProperty;

import org.springframework.jms.core.ImsTemplate;

import org.springframework.scheduling.annotation.Scheduled;

import org.springframework.stereotype.Component;

import java.util.ArrayList;

import java.util.List;

@Component

@slf4j

@ConditionalonProperty(value = "ibmmq.connectivity.test.enabled", havingValue = "true", matchIfMissing = true)

public class IBMMqConnectionTest implements ConnectionTest {

@Value("${ibung.receive.message.check.delay}")

private String delay;

@Autowired

private 3msTemplate jmsTemplate;

public volatile ConnectionEventMap<String, ConnectionEvent> connectionEventMap;

@Autowired

public IBMMgConnectionTest(ConnectionEventMap<String, ConnectionEvent> connectionEventMap) {

this.connectionEventMap = connectionEventMap;

}

@Override

@Scheduled (cron = "${ibmmg.connectivity.test.schedule.cron)")

public List<ConnectionEvent> testConnection() {

log.info(" into ibmmg connection");
$________$

@Override

@Scheduled(cron = "${ibmmq.connectivity.test.schedule.cron}")

public List<ConnectionEvent> testConnection() {

log.info(" into ibmmq connection");

List<ConnectionEvent> resultList = new ArrayList<>();

ConnectionEvent connectionEvent;

try {

connectionEvent = sendMessage();

//receiveMessage();

} catch (Exception e) {

throw new RuntimeException(e);

}

resultList.add(connectionEvent);

return resultList;

}

private ConnectionEvent sendMessage() {

log.info(" into ibmmq sendMessage");

// String xmlPayload = "<data><item>example</item><uniqueid>u1</uniqueid> </data>";

String xmlPayload = "test ibmmq msg";

ConnectionEvent connectionEvent = new ConnectionEvent();

I

try {

jmsTemplate.convertAndSend("DEV.QUEUE.1",xmlPayload);

log.info("Sent message to queue IBMMQ");

connectionEvent.setDelay (Integer.parseInt(delay));

connectionEvent.setSendTime(System.currentTimeMillis());

connectionEvent.setReceiveTime(null);

connectionEvent.setStatus(ConnectionEvent.STATUS.PENDING);

} catch (Exception e) {

connectionEvent.setStatus(ConnectionEvent.STATUS.DOWN);

log.error("Error while sending message to the IBM MQ", e);

}

connectionEvent, setServerName("ibmmq");

connectionEvent,setConnectionName("IBMMQ");

__________

try {

jmsTemplate.convertAndSend("DEV.QUEUE.1",xmlPayload);

log.info("Sent message to queue IBMMQ");

connectionEvent.setDelay (Integer.parseInt(delay));

connectionEvent.setSendTime(System.currentTimeMillis());

connectionEvent.setReceiveTime(null);

connectionEvent.setStatus(ConnectionEvent.STATUS.PENDING);

} catch (Exception e) {

connectionEvent.setStatus(ConnectionEvent.STATUS.DOWN);

log.error("Error while sending message to the IBM MQ", e);

}

connectionEvent.setServerName("ibmmq");

connectionEvent.setConnectionName("IBMMQ");

connectionEvent.setType(ConnectionEvent.TYPE.MQ);

log.info("xmlPayload in send : {}", xmlPayload);

connectionEventMap.put(xmlPayload, connectionEvent);

log.info("IBMMQ connectioneventmap send{}", connectionEventMap);

return connectionEvent;

}
